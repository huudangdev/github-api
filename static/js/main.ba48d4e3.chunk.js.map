{"version":3,"sources":["store.js","components/Form.js","components/InfoUser.js","components/ListRepo.js","App.js","serviceWorker.js","index.js"],"names":["_store","store","searchTerm","userName","requests","datas","success","fails","destroy","isSuccess","message","setRequests","setDataFromFetch","console","log","fetch","then","res","json","data","catch","error","view","useState","searchTearmLocal","setSearchTermLocal","handleSubmit","event","a","preventDefault","SearchTerm","UserName","onSubmit","placeholder","value","onChange","target","searchTearm","className","autoFocus","InfoUser","avatar_url","length","owner","amountRepo","src","alt","onClick","itemClass","complete","amountData","style","color","undefined","map","repo","key","id","href","html_url","name","description","clone_url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba48d4e3.chunk.js","sourcesContent":["import {store} from 'react-easy-state';\n\n// use 'todos' instead of 'this' in the store methods to make them passable as callbacks\n\nconst _store = store({\n    searchTerm: '',\n    userName: '',\n    requests: 0,\n    datas: [],\n    success: 0,\n    fails: 0,\n\n    destroy() {\n        _store.searchTerm = null;\n        _store.userName = null;\n        _store.datas = [];\n    },\n\n    set UserName (searchTerm) {\n        _store.userName = searchTerm;\n    },\n\n    get getUserName () {\n        return _store.userName;\n    },\n\n    get getRequests() {\n        return _store.requests;\n    },\n\n    set SearchTerm (searchTerm) {\n        _store.searchTerm = searchTerm;\n    },\n\n    isSuccess () {\n        (_store.datas.message === 'Not Found') ?\n            (\n                _store.fails++\n             ) :\n            (\n                _store.success++\n            )\n    },\n\n    setRequests () {\n        _store.requests++;\n    },\n\n    setDataFromFetch () {\n        console.log(_store.searchTerm);\n        fetch(`https://api.github.com/users/${_store.searchTerm}/repos`)\n        .then(res => res.json())\n        .then(data => {\n            _store.datas = data;\n            console.log(_store.datas);\n            _store.isSuccess();\n        })\n        .catch(error => console.log(error));\n    }\n})\n\nexport default _store;","import React, {useState} from 'react';\nimport {view} from 'react-easy-state';\nimport _store from '../store';\n\nconst Form = () => {\n    const [searchTearmLocal, setSearchTermLocal] = useState('');\n    const {setDataFromFetch, setRequests} = _store;\n    \n    const handleChange = (event) => {\n        event.preventDefault();\n        setSearchTermLocal(event.target.value);\n        _store.searchTearm = searchTearmLocal;\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        _store.SearchTerm = searchTearmLocal;\n        _store.UserName = searchTearmLocal;\n        setRequests();\n        await setDataFromFetch();\n        \n        setSearchTermLocal('');\n    }\n\n    return (\n        <>\n        <form onSubmit={handleSubmit}>\n            <input placeholder='Search the user...' \n                value={searchTearmLocal} \n                onChange={handleChange}\n                className='new'\n                autoFocus\n            />\n        </form>\n        </>\n    );\n}\n\nexport default view(Form);","import React from 'react';\nimport _store from '../store';\n\nconst InfoUser = () => {\n    const {avatar_url} = (_store.datas.length !== 0) ? _store.datas[0].owner : '#';\n    const amountRepo = _store.datas.length;\n    const {userName, destroy} = _store;\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <td><i>Avatar</i></td>\n                    <td><i>User Name</i></td>\n                    <td><i>Repositories</i></td>\n                    <td></td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td><img src={avatar_url} alt='avatar'/></td>\n                    <td><b>{userName}</b></td>\n                    <td>{amountRepo}</td>\n                    <td><button onClick={() => destroy()}>x</button></td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nexport default InfoUser;\n","import React from 'react';\nimport className from 'classnames';\nimport {view} from 'react-easy-state';\n\nimport _store from '../store';\nimport InfoUser from './InfoUser';\n\nconst ListRepo = () => {\n    const itemClass= className({view: true, complete: false});\n    const amountData = _store.datas.length;\n    const {success, fails, requests} = _store\n\n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        <td style={{color:'green'}}>Success</td>\n                        <td style={{color:'red'}}>Fails</td>\n                        <td>Requests</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{success}</td>\n                        <td>{fails}</td>\n                        <td>{requests}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            {(amountData !== null && amountData !== undefined && amountData !== 0) ? (\n                <InfoUser/>\n            ) : (\n                <p></p>\n            )}\n\n            <ul className='list'>\n                {(amountData !== null && amountData !== undefined && amountData !== 0) ? (\n                _store.datas.map(repo => \n                    <li className={itemClass} key={repo.id}>\n                        <label>\n                            <a href={repo.html_url}>{repo.name}</a>\n                            <pre>{repo.description}</pre>\n                            <pre>git clone {repo.clone_url}</pre>\n                        </label>\n                    </li>\n                )) : (\n                    <p></p>\n                )}\n            </ul>\n        </>\n    )\n}\n\nexport default view(ListRepo);","import React from 'react';\nimport {view} from 'react-easy-state';\n\nimport Form from './components/Form';\nimport ListRepo from './components/ListRepo';\n\nconst App = () => {\n  return (\n    <div className='apiapp'>\n      <header className='header'>\n        <h1>User Repo</h1>\n        <div className='section'>\n          <span className='app-section'>Sections:</span>\n          <div className='filters'>\n            <button className='selected'>\n              Search User\n            </button>\n            <button className=''>\n              Search Repo\n            </button>\n          </div>\n        </div>\n        <Form/>\n      </header>      \n      <ListRepo/>\n    </div>\n  );\n}\n\nexport default view(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}